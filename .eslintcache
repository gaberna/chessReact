[{"E:\\Gagga\\chess-react\\src\\reportWebVitals.js":"1","E:\\Gagga\\chess-react\\src\\App.js":"2","E:\\Gagga\\chess-react\\src\\index.js":"3","E:\\Gagga\\chess-react\\src\\Pieces\\whitePiece.js":"4","E:\\Gagga\\chess-react\\src\\Pieces\\blackPiece.js":"5","E:\\Gagga\\chess-react\\src\\pieces.js":"6","E:\\Gagga\\chess-react\\src\\Pieces\\PieceFactory.js":"7","E:\\Gagga\\chess-react\\src\\WebSocketClient\\TurnManager.js":"8","E:\\Gagga\\chess-react\\src\\WebSocketClient\\EventManager.js":"9","E:\\Gagga\\chess-react\\src\\screens\\Game.js":"10"},{"size":362,"mtime":1606265362668,"results":"11","hashOfConfig":"12"},{"size":359,"mtime":1607565227451,"results":"13","hashOfConfig":"12"},{"size":500,"mtime":1606265362668,"results":"14","hashOfConfig":"12"},{"size":2307,"mtime":1607439312854,"results":"15","hashOfConfig":"12"},{"size":952,"mtime":1607351966849,"results":"16","hashOfConfig":"12"},{"size":938,"mtime":1607374233319,"results":"17","hashOfConfig":"12"},{"size":263,"mtime":1607456830800,"results":"18","hashOfConfig":"12"},{"size":1161,"mtime":1607569768411,"results":"19","hashOfConfig":"12"},{"size":1027,"mtime":1607567464647,"results":"20","hashOfConfig":"12"},{"size":3476,"mtime":1607567713501,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1w5johp",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},"E:\\Gagga\\chess-react\\src\\reportWebVitals.js",[],"E:\\Gagga\\chess-react\\src\\App.js",["46"],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Game } from \"./screens/Game\";\n\nconst Constants = {\n  socketUrl:\n    \"ws://megachess.herokuapp.com/service?authtoken=b12fdd43-930d-4f8d-8f41-24cdae62ba85\",\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game socketUrl={Constants.socketUrl} />\n    </div>\n  );\n}\n\nexport default App;\n","E:\\Gagga\\chess-react\\src\\index.js",[],["47","48"],"E:\\Gagga\\chess-react\\src\\Pieces\\whitePiece.js",[],"E:\\Gagga\\chess-react\\src\\Pieces\\blackPiece.js",[],"E:\\Gagga\\chess-react\\src\\pieces.js",["49"],"export const Piece = {\r\n  PAWN: \"p\",\r\n  QUEEN: \"q\",\r\n  HORSE: \"h\",\r\n  ROCK: \"r\",\r\n  BISHOP: \"b\",\r\n  KING: \"k\",\r\n};\r\n\r\nexport function getFormatedPiece(piece, turn) {\r\n  let isBlack = turn === \"black\";\r\n  switch (piece) {\r\n    case Piece.PAWN: {\r\n      let val = isBlack ? Piece.PAWN : Piece.PAWN.toUpperCase();\r\n      return val;\r\n    }\r\n    case Piece.QUEEN: {\r\n      let val = isBlack ? Piece.QUEEN : Piece.QUEEN.toUpperCase();\r\n      return val;\r\n    }\r\n    case Piece.ROCK: {\r\n      let val = isBlack ? Piece.ROCK : Piece.ROCK.toUpperCase();\r\n      return val;\r\n    }\r\n    case Piece.HORSE: {\r\n      let val = isBlack ? Piece.HORSE : Piece.HORSE.toUpperCase();\r\n      return val;\r\n    }\r\n    case Piece.BISHOP: {\r\n      let val = isBlack ? Piece.BISHOP : Piece.BISHOP.toUpperCase();\r\n      return val;\r\n    }\r\n    case Piece.KING: {\r\n      let val = isBlack ? Piece.KING : Piece.KING.toUpperCase();\r\n      return val;\r\n    }\r\n  }\r\n}\r\n","E:\\Gagga\\chess-react\\src\\Pieces\\PieceFactory.js",[],"E:\\Gagga\\chess-react\\src\\WebSocketClient\\TurnManager.js",[],"E:\\Gagga\\chess-react\\src\\WebSocketClient\\EventManager.js",[],"E:\\Gagga\\chess-react\\src\\screens\\Game.js",["50","51","52","53","54","55","56"],"import React, {\r\n  useState,\r\n  useCallback,\r\n  useMemo,\r\n  useRef,\r\n  useEffect,\r\n  // useEffect,\r\n} from \"react\";\r\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\r\nimport { useEventManager } from \"../WebSocketClient/EventManager\";\r\n\r\nexport const Game = ({ socketUrl }) => {\r\n  const [userList, setuserList] = useState([]);\r\n  const [lastData, setLastData] = useState(\"\");\r\n\r\n  // Connect to WS\r\n  const { sendMessage, readyState, getWebSocket } = useWebSocket(socketUrl, {\r\n    shouldReconnect: () => true,\r\n  });\r\n\r\n  const [lastMessage] = useEventManager(getWebSocket);\r\n\r\n  const messageHistory = useRef([]);\r\n  useEffect(() => {\r\n    if (lastMessage) {\r\n      messageHistory.current = [lastMessage, ...messageHistory.current];\r\n    }\r\n  }, [lastMessage]);\r\n\r\n  //   const sendMje = (mje) => {\r\n  //     sendMessage({\r\n  //       action: mje.action,\r\n  //       data: mje.data,\r\n  //     });\r\n  //   };\r\n\r\n  //   const sendJson = (mje) => {\r\n  //     sendJsonMessage({\r\n  //       action: mje.action,\r\n  //       data: {\r\n  //         board_id: mje.data.board_id,\r\n  //       },\r\n  //     });\r\n  //   };\r\n\r\n  //   messageHistory.current = useMemo(\r\n  //     () => messageHistory.current.concat(lastMessage),\r\n  //     [lastMessage]\r\n  //   );\r\n\r\n  //   const handleSend = (message) => {\r\n  //     responseMsje(message);\r\n  //   };\r\n\r\n  //   messageHistory.current = useMemo(\r\n  //     () => messageHistory.current.concat(lastMessage),\r\n  //     [lastMessage]\r\n  //   );\r\n\r\n  const handleClickSendMessage = useCallback(\r\n    () => (\r\n      sendMessage({\r\n        action: \"login\",\r\n        data: {},\r\n      }),\r\n      []\r\n    )\r\n  );\r\n\r\n  const handleClickChallengue = useCallback(\r\n    () => (\r\n      sendMessage({\r\n        action: \"challenge\",\r\n        data: {\r\n          username: \"gaberna\",\r\n          message: \"WAR!\",\r\n        },\r\n      }),\r\n      []\r\n    )\r\n  );\r\n\r\n  const handleClickAbort = (lastData) => {\r\n    console.log(\"lastData:\", lastData);\r\n    sendMessage({\r\n      action: \"abort\",\r\n      data: {\r\n        board_id: lastData.board_id,\r\n      },\r\n    });\r\n  };\r\n\r\n  const connectionStatus = {\r\n    [ReadyState.CONNECTING]: \"Connecting\",\r\n    [ReadyState.OPEN]: \"Open\",\r\n    [ReadyState.CLOSING]: \"Closing\",\r\n    [ReadyState.CLOSED]: \"Closed\",\r\n    [ReadyState.UNINSTANTIATED]: \"Uninstantiated\",\r\n  }[readyState];\r\n\r\n  return (\r\n    <div>\r\n      {console.log(userList)}\r\n      <button\r\n        onClick={handleClickSendMessage}\r\n        disabled={readyState !== ReadyState.OPEN}\r\n      >\r\n        LOGIN\r\n      </button>\r\n      <button\r\n        onClick={handleClickChallengue}\r\n        disabled={readyState !== ReadyState.OPEN}\r\n      >\r\n        CHALLENGUE User\r\n      </button>\r\n      <button\r\n        onClick={handleClickAbort(lastData)}\r\n        disabled={readyState !== ReadyState.OPEN}\r\n      >\r\n        Abort!\r\n      </button>\r\n\r\n      <hr />\r\n      <div>\r\n        <span>The WebSocket is currently {connectionStatus}</span>\r\n        <br />\r\n        <span>\r\n          {lastMessage ? (\r\n            <span>\r\n              Last message: <br />\r\n              {lastMessage.data}\r\n            </span>\r\n          ) : null}\r\n        </span>\r\n        <br />\r\n        <ul>\r\n          <span>History:</span> <br />\r\n          {messageHistory.current.map((message, idx) => (\r\n            <>\r\n              <span key={idx}>{message.data}</span>\r\n              <br />\r\n            </>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",{"ruleId":"57","severity":1,"message":"58","line":1,"column":8,"nodeType":"59","messageId":"60","endLine":1,"endColumn":12},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":12,"column":3,"nodeType":"67","messageId":"68","endLine":37,"endColumn":4},{"ruleId":"57","severity":1,"message":"69","line":4,"column":3,"nodeType":"59","messageId":"60","endLine":4,"endColumn":10},{"ruleId":"57","severity":1,"message":"70","line":13,"column":20,"nodeType":"59","messageId":"60","endLine":13,"endColumn":31},{"ruleId":"57","severity":1,"message":"71","line":14,"column":20,"nodeType":"59","messageId":"60","endLine":14,"endColumn":31},{"ruleId":"72","severity":1,"message":"73","line":60,"column":34,"nodeType":"59","endLine":60,"endColumn":45},{"ruleId":"74","severity":1,"message":"75","line":65,"column":9,"nodeType":"76","messageId":"77","endLine":65,"endColumn":10},{"ruleId":"72","severity":1,"message":"73","line":70,"column":33,"nodeType":"59","endLine":70,"endColumn":44},{"ruleId":"74","severity":1,"message":"75","line":78,"column":9,"nodeType":"76","messageId":"77","endLine":78,"endColumn":10},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["78"],"no-negated-in-lhs",["79"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useMemo' is defined but never used.","'setuserList' is assigned a value but never used.","'setLastData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation"]